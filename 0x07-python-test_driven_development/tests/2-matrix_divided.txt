#test cases for 2-matrix_divided module

>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
>>> l1 = [[2, 3, 4], [8, 8, 8]]
>>> l2 = [[-6.0, -4, 9.5]]
>>> l3 = [4, 9, 2] 
>>> l4 = [(4, 6, 8.2), (3, 5)]
>>> l5 = ([5, 6], [3, 4])
>>> l6 = [[3, 5.5], 6, "h"]
>>> l7 = [['a'], ['p'], ['p'], ['l'], ['e']]
>>> l8 = [[3, 4], [5, 6, 7], [1]]

>>> matrix_divided(l1, 6)
[[0.33, 0.5, 0.67], [1.33, 1.33, 1.33]]
>>> matrix_divided(l1, -2)
[[-1.0, -1.5, -2.0], [-4.0, -4.0, -4.0]]
>>> matrix_divided(l2, 2)
[[-3.0, -2.0, 4.75]]
>>> matrix_divided(l2, -2.0)
[[3.0, 2.0, -4.75]]

>>> try:
...    matrix_divided(l1, 0)
... except ZeroDivisionError as e:
...    print(e)
division by zero

>>> try:
...    matrix_divided(l1, None)
... except TypeError as e:
...    print(e)
div must be a number

>>> try:
...    matrix_divided(None, 2)
... except TypeError as e:
...    print(e)
matrix must be a matrix (list of lists) of integers/floats

>>> try:
...    matrix_divided(l3, 2)
... except TypeError as e:
...    print(e)
matrix must be a matrix (list of lists) of integers/floats

>>> try:
...    matrix_divided(l4, 0)
... except ZeroDivisionError as e:
...    print(e)
division by zero

>>> try:
...    matrix_divided(l5, l4)
... except TypeError as e:
...    print(e)
div must be a number

>>> try:
...    matrix_divided(l6, 3.0)
... except TypeError as e:
...    print(e)
matrix must be a matrix (list of lists) of integers/floats

>>> try:
...    matrix_divided(l7, -8)
... except TypeError as e:
...    print(e)
matrix must be a matrix (list of lists) of integers/floats

>>> try:
...    matrix_divided(l8, 4)
... except TypeError as e:
...    print(e)
Each row of the matrix must have the same size
